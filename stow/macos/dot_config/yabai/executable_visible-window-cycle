#!/usr/bin/env python3

"""
Returns the ID for the next or previous visible window
relative to the focused window.
Cycles at edges.

If the space is in stacked mode, cycles only within the same space
because most windows are full screen and it's not useful to cycle
across spaces.
"""

import argparse
import json
import os
import subprocess
import sys

def main(args):
    parser = argparse.ArgumentParser()
    parser.add_argument("direction", choices=["next", "prev"])
    args = parser.parse_args(args)

    stdout = subprocess.check_output(["yabai", "-m", "query", "--windows"])

    windows = []
    focused = None
    stacked = False
    for w in json.loads(stdout.decode("utf-8")):
        if not w["is-visible"]:
            continue
        windows.append(w)
        if w["stack-index"] > 0:
            stacked = True
        if w["has-focus"]:
            focused = w

    windows = sorted(
        windows,
        key=lambda w: (
            w["display"],
            w["frame"]["x"],
            w["frame"]["y"],
        ),
    )

    if focused is None:
        # If none of the windows is focused,
        # focus on the first one.
        if len(windows) > 0:
            print(windows[0]["id"])
            sys.exit(0)

        print("No focused window found", file=sys.stderr)
        sys.exit(1)

    if stacked:
        windows = [w for w in windows if w["space"] == focused["space"]]

    for idx, w in enumerate(windows):
        if w["id"] != focused["id"]:
            continue

        target = None
        if args.direction == "next":
            next_idx = idx + 1
            if next_idx >= len(windows):
                next_idx = 0
            target = windows[next_idx]
        elif args.direction == "prev":
            prev_idx = idx - 1
            if prev_idx < 0:
                prev_idx = len(windows) - 1
            target = windows[prev_idx]

        if target:
            print(target["id"])
            sys.exit(0)

    print("No window to cycle to found", file=sys.stderr)
    sys.exit(1)


if __name__ == "__main__":
    main(sys.argv[1:])
