# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.


# swap managed window
# shift + alt - h : yabai -m window --swap north

# move managed window
# shift + cmd - h : yabai -m window --warp east

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

shift + cmd - d : yabai -m space --toggle show-desktop
shift + cmd - r : yabai -m space --rotate 90
shift + cmd - 0x2A : yabai -m space --mirror y-axis
shift + cmd - 0x1B : yabai -m space --mirror x-axis
shift + cmd - 0 : yabai -m space --balance


# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
cmd + alt + shift - n : yabai -m space --create && \
                index="$(~/.config/yabai/last-space-same-display)" && \
                yabai -m window --space "${index}" && \
                yabai -m space --focus "${index}"
# create desktop and focus
cmd + alt - n : yabai -m space --create && \
                index="$(~/.config/yabai/last-space-same-display)" && \
                yabai -m space --focus "${index}"
cmd + alt - w : index=$(~/.config/yabai/space-sibling next || ~/.config/yabai/space-sibling prev) && \
                yabai -m space --destroy && \
                yabai -m space --focus "${index}"

# Cycle through layouts for the current space.
cmd + alt - space : layout="$(yabai -m query --spaces --space | jq -r '["stack", "bsp"] as $modes | .type as $mode | ($modes | index($mode) + 1) % ($modes | length) | $modes[.]')" && \
                    yabai -m space --layout "$layout"

# Move to another space
ctrl - right : yabai -m space --focus "$(~/.config/yabai/space-sibling next)"
ctrl - left : yabai -m space --focus "$(~/.config/yabai/space-sibling prev)"

# Move window to another space
shift + ctrl - right : yabai -m window --space "$(~/.config/yabai/space-sibling next)" --focus
shift + ctrl - left : yabai -m window --space "$(~/.config/yabai/space-sibling prev)" --focus

# Move window to another monitor
shift + ctrl + alt - right : yabai -m window --display next --focus
shift + ctrl + alt - left : yabai -m window --display prev --focus

# Focus on another monitor
shift + cmd + alt - right : yabai -m display --focus next
shift + cmd + alt - left : yabai -m display --focus prev

# Close the current window.
shift + alt - c : yabai -m window --close

# Move to specific spaces.
ctrl - 1 : yabai -m space --focus 1
ctrl - 2 : yabai -m space --focus 2
ctrl - 3 : yabai -m space --focus 3
ctrl - 4 : yabai -m space --focus 4
ctrl - 5 : yabai -m space --focus 5
ctrl - 6 : yabai -m space --focus 6
ctrl - 7 : yabai -m space --focus 7
ctrl - 8 : yabai -m space --focus 8
ctrl - 9 : yabai -m space --focus 9
ctrl - 0 : yabai -m space --focus "$(~/.config/yabai/last-space-same-display)"

# Move window to specific space.
shift + ctrl - 1 : yabai -m window --space 1; yabai -m space --focus 1
shift + ctrl - 2 : yabai -m window --space 2; yabai -m space --focus 2
shift + ctrl - 3 : yabai -m window --space 3; yabai -m space --focus 3
shift + ctrl - 4 : yabai -m window --space 4; yabai -m space --focus 4
shift + ctrl - 5 : yabai -m window --space 5; yabai -m space --focus 5
shift + ctrl - 6 : yabai -m window --space 6; yabai -m space --focus 6
shift + ctrl - 7 : yabai -m window --space 7; yabai -m space --focus 7
shift + ctrl - 8 : yabai -m window --space 8; yabai -m space --focus 8
shift + ctrl - 9 : yabai -m window --space 9; yabai -m space --focus 9
shift + ctrl - 0 : index="$(~/.config/yabai/last-space-same-display)" && \
                   yabai -m window --space "$index" --focus

# Focus windows
alt - j : yabai -m window --focus "$(~/.config/yabai/visible-window-cycle next)"
alt - k : yabai -m window --focus "$(~/.config/yabai/visible-window-cycle prev)"

# Swap windows
ctrl + alt - j : yabai -m window --swap next || yabai -m window --swap first
ctrl + alt - k : yabai -m window --swap prev || yabai -m window --swap last

# Move floating window
ctrl + alt - down : yabai -m window --move rel:0:80
ctrl + alt - up : yabai -m window --move rel:0:-80
ctrl + alt - left : yabai -m window --move rel:-80:0
ctrl + alt - right : yabai -m window --move rel:80:0

# Resize windows
alt + cmd - right : yabai -m window --resize right:80:0 || yabai -m window --resize left:80:0
alt + cmd - left : yabai -m window --resize right:-80:0 || yabai -m window --resize left:-80:0
alt + cmd - up : yabai -m window --resize top:0:-80 || yabai -m window --resize bottom:0:-80
alt + cmd - down : yabai -m window --resize top:0:80 || yabai -m window --resize bottom:0:80

# Toggle window zoom.
ctrl + shift - return : yabai -m window --toggle zoom-fullscreen
ctrl - return : yabai -m window --toggle zoom-parent

# float / unfloat window and center on screen
alt + shift - t : yabai -m window --toggle float --grid 8:8:1:1:6:6
alt + shift - f : yabai -m window --toggle float --grid 2:2:0:0:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky --toggle topmost --toggle pip

shift + alt - return : osascript -e 'tell application "iTerm" to create window with default profile'
ctrl + cmd - l : open -a ScreenSaverEngine
